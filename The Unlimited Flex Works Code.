-- Define Services
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local player = players.LocalPlayer
local isPlaying = false
local animationTrack = nil -- Store animation to reload after hit
local soundInstances = {} -- Track active sound instances
local tool = nil -- Ensure tool is globally referenced

-- Tool Name & Version System
local TOOL_NAME = "Unlimited Flexworks"
local TOOL_VERSION = "1.6" -- Change this when updating

-- **Function to Remove Outdated Tools & Keep Latest Version**
local function removeOutdatedTools()
    local backpack = player:FindFirstChild("Backpack")
    local starterGear = player:FindFirstChild("StarterGear")
    
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and item.Name == TOOL_NAME then
                item:Destroy()
            end
        end
    end
    
    if starterGear then
        for _, item in pairs(starterGear:GetChildren()) do
            if item:IsA("Tool") and item.Name == TOOL_NAME then
                item:Destroy()
            end
        end
    end
end

-- **Function to Create and Store the Tool Persistently**
local function createTool()
    local backpack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack")
    local starterGear = player:FindFirstChild("StarterGear") or player:WaitForChild("StarterGear")
    
    if not backpack then return end
    
    removeOutdatedTools()
    
    tool = Instance.new("Tool")
    tool.Name = TOOL_NAME
    tool.RequiresHandle = false
    tool.Parent = backpack
    
    if starterGear then
        local clonedTool = tool:Clone()
        clonedTool.Parent = starterGear
    end
    
    return tool
end

-- **Function to Stop All Sounds and Reload Animation**
local function stopAllAudioAndReloadAnimation()
    for _, sound in pairs(soundInstances) do
        if sound then
            sound:Stop()
            sound:Destroy()
        end
    end
    soundInstances = {} -- Clear stored sounds
    if animationTrack then
        animationTrack:Stop()
    end
end

-- **Function to Play Animation**
local function playAnimation()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
        animator.Parent = humanoid
        
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://77727115892579"
        animationTrack = animator:LoadAnimation(animation)
        
        animationTrack.Priority = Enum.AnimationPriority.Action
        animationTrack.Looped = false
        animationTrack:Play()
        return animationTrack.Length
    end
    
    return 3 -- Default duration if animation fails
end

-- **Function to Play Audio (Client-Sided on Screen)**
local function playAudio()
    local audioIDs = {"99126314241685", "95410275491981", "128136381213631"}
    
    for _, id in pairs(audioIDs) do
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. id
        sound.Volume = 2
        sound.Looped = false
        sound.Parent = game:GetService("SoundService") -- Play audio globally for client, no position
        sound:Play()
        table.insert(soundInstances, sound)
    end
end

-- **Function to Setup Tool Equipped Behavior**
local function setupTool()
    if tool then
        tool.Equipped:Connect(function()
            if isPlaying then return end
            isPlaying = true
            stopAllAudioAndReloadAnimation() -- Stop all sounds if another animation is playing
            local duration = playAnimation()
            playAudio()
            task.wait(duration)
            isPlaying = false
        end)
    end
end

-- Ensure the tool persists after respawn
local function ensureToolPersistence()
    player.CharacterAdded:Connect(function()
        wait(1) -- Wait for character to fully load
        tool = createTool()
        setupTool()
    end)
end

-- Ensure the tool exists at script execution
tool = createTool()
setupTool()
ensureToolPersistence()
-- FINAL FUCKING UPDATE FUCK YOU GITHUB FOR NOT ALLOWING ME TO UPDATE THIS SHIT
