local imageUrl = "https://raw.githubusercontent.com/Justanewplaye/Unlimited-Flex-Works/refs/heads/main/12e40e625eb48f14b4765cf26fc2993c.png"

-- Create GUI and button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ShiftEmulatorGui"
screenGui.Parent = game:GetService("CoreGui")

local button = Instance.new("ImageButton")
button.Name = "ShiftButton"
button.Size = UDim2.new(0, 60, 0, 60)  -- Circular button (60x60 pixels)
button.Position = UDim2.new(0.9, -70, 0.8, -70)
button.BackgroundTransparency = 1  -- Removes background color
button.Parent = screenGui

-- Add rounded corners
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(1, 0)  -- Makes it fully circular
uiCorner.Parent = button

-- Attempt to load external image
local success, result = pcall(function()
    return game:HttpGet(imageUrl)
end)

if success then
    button.Image = imageUrl -- Some executors support setting external URLs
else
    warn("Failed to load external image. Roblox may be blocking this request.")
end

-- Right Shift Emulator Function
local function emulateRightShift()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    if VirtualInputManager then
        -- Simulate key press: press then release after a short delay
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.RightShift, false, nil)
        wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.RightShift, false, nil)
    else
        warn("VirtualInputManager not available in this executor.")
    end
end

-- When the button is clicked, emulate the Right Shift press (activating the script's built-in function)
button.MouseButton1Click:Connect(function()
    emulateRightShift()
end)

-- Draggable Functionality
local UserInputService = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    button.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = button.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        update(input)
    end
end
