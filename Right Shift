-- ‚úÖ Force HttpService to allow external requests (Fixes executor restrictions)
pcall(function()
    setfflag("HttpService", "true")
    setfflag("AllowHttpRequests", "true")
end)

-- üöÄ Auto-Detect Workspace Directory
local function getWorkspacePath()
    if syn and syn.request then
        return "synapse/workspace/"
    elseif getcustomasset then
        return "workspace/"
    elseif isfolder and isfile then
        return "autoexec/"  -- Fallback for other executors
    else
        warn("‚ö†Ô∏è Executor workspace not found! Using default.")
        return "./"  -- Default to current directory
    end
end

local workspacePath = getWorkspacePath()
local imageFileName = "shift_icon.png"
local imagePath = workspacePath .. imageFileName

-- ‚úÖ Image URL (Raw from GitHub)
local imageUrl = "https://raw.githubusercontent.com/Justanewplaye/Unlimited-Flex-Works/refs/heads/main/12e40e625eb48f14b4765cf26fc2993c.png"

-- ‚úÖ Function to check and download the image
local function fetchAndStoreImage()
    if isfile(imagePath) then
        print("‚úÖ Image already exists in workspace: " .. imagePath)
        return true
    end

    -- üöÄ Auto-Download Image
    local requestFunction = syn and syn.request or http_request or request
    if not requestFunction then
        warn("‚ö†Ô∏è Your executor does not support external requests.")
        return false
    end

    local response = requestFunction({Url = imageUrl, Method = "GET"})
    if response and response.StatusCode == 200 then
        if not isfolder(workspacePath) then
            makefolder(workspacePath)  -- ‚úÖ Create the workspace folder if missing
        end
        writefile(imagePath, response.Body)  -- ‚úÖ Save image to workspace
        print("‚úÖ Image downloaded and saved to: " .. imagePath)
        return true
    else
        warn("‚ö†Ô∏è Failed to download image!")
        return false
    end
end

-- ‚úÖ Function to Load Image from File
local function loadImageAsset()
    if isfile(imagePath) then
        if getsynasset then
            return getsynasset(imagePath)
        elseif getcustomasset then
            return getcustomasset(imagePath)
        elseif loadfile then
            return "file://" .. imagePath
        else
            warn("‚ö†Ô∏è No valid method to load image asset!")
            return nil
        end
    else
        warn("‚ö†Ô∏è Image file missing: " .. imagePath)
        return nil
    end
end

-- ‚úÖ Create GUI and Button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ShiftEmulatorGui"
screenGui.Parent = game:GetService("CoreGui")

local button = Instance.new("ImageButton")
button.Name = "ShiftButton"
button.Size = UDim2.new(0, 75, 0, 75)  -- üî• Square (75x75 pixels)
button.Position = UDim2.new(0.85, 0, 0.75, 0)
button.BackgroundTransparency = 1  -- Removes background color
button.ScaleType = Enum.ScaleType.Fit  -- üî• Fixes Image Stretching (Keeps Aspect Ratio)
button.Parent = screenGui

-- ‚úÖ Add rounded edges (but NOT a full circle)
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0.3, 0)  -- üî• Slightly rounded corners (30% of size)
uiCorner.Parent = button

-- ‚úÖ Load Image from Auto-Detected Workspace
spawn(function()
    if fetchAndStoreImage() then
        local imageAsset = loadImageAsset()
        if imageAsset then
            button.Image = imageAsset
            button.ScaleType = Enum.ScaleType.Fit  -- ‚úÖ Makes Image Fit the Square
            print("‚úÖ Image successfully loaded from workspace!")
        else
            warn("‚ö†Ô∏è Image could not be loaded!")
        end
    end
end)

-- ‚úÖ Right Shift Emulator Function
local function emulateRightShift()
    local VirtualInputManager = game:GetService("VirtualInputManager")
    if VirtualInputManager then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.RightShift, false, nil)
        wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.RightShift, false, nil)
    else
        warn("‚ö†Ô∏è VirtualInputManager not available in this executor.")
    end
end

-- ‚úÖ Clicking the button emulates Right Shift (to toggle script)
button.MouseButton1Click:Connect(function()
    emulateRightShift()
end)

-- ‚úÖ Draggable Button (PC + Mobile Touch Support)
local UserInputService = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    local newX = startPos.X.Offset + delta.X
    local newY = startPos.Y.Offset + delta.Y

    -- Prevents button from going out of screen bounds
    local screenSize = game:GetService("GuiService"):GetScreenResolution()
    local buttonSize = button.AbsoluteSize

    local clampedX = math.clamp(newX, 0, screenSize.X - buttonSize.X)
    local clampedY = math.clamp(newY, 0, screenSize.Y - buttonSize.Y)

    button.Position = UDim2.new(0, clampedX, 0, clampedY)
end

-- ‚úÖ PC Dragging
button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = button.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        update(input)
    end
end)

-- ‚úÖ Mobile Touch Dragging
button.TouchPan:Connect(function(touchPosition, _, state)
    if state == Enum.UserInputState.Begin then
        dragging = true
        dragStart = touchPosition
        startPos = button.Position
    elseif state == Enum.UserInputState.Change and dragging then
        update({ Position = touchPosition })  -- Simulate mouse movement with touch
    elseif state == Enum.UserInputState.End then
        dragging = false
    end
end)
