local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local backpack = player:FindFirstChildOfClass("Backpack") or player:WaitForChild("Backpack")

-- Variables
local selectedPart = nil
local holding = false
local grabbedObject = nil
local grabDistance = 50 -- Default grab range
local throwStrength = 200 -- Powerful throw
local rotationSpeed = 5 -- Rotation adjustment
local tiltSpeed = 5 -- Tilting adjustment
local heavyStrength = Vector3.new(100000, 100000, 100000) -- Higher lifting power
local isLocked = false -- Lock mode status
local maxGrabDistance = math.huge -- Infinite range 🚀

-- Function to detect if the player is on mobile
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Function to create a tool and re-add it to the player's backpack
local function createTool(name)
    local tool = Instance.new("Tool")
    tool.Name = name
    tool.RequiresHandle = false
    tool.Parent = backpack
    return tool
end

-- Function to respawn tools after death
local function respawnTools()
    task.wait(1) -- Small delay to prevent issues
    backpack = player:FindFirstChildOfClass("Backpack") or player:WaitForChild("Backpack")

    if not backpack:FindFirstChild("Selection Tool") then
        createTool("Selection Tool")
    end
    if not backpack:FindFirstChild("Telekinesis Tool") then
        createTool("Telekinesis Tool")
    end
end

-- Detect when the player respawns and re-add the tools
player.CharacterAdded:Connect(function()
    task.wait(3) -- Give time for respawn
    respawnTools()
end)

-- Remove old tools before adding new ones (fixes execution issues)
for _, tool in pairs(backpack:GetChildren()) do
    if tool:IsA("Tool") and (tool.Name == "Selection Tool" or tool.Name == "Telekinesis Tool") then
        tool:Destroy()
    end
end

-- Create Tools
local selectionTool = createTool("Selection Tool")
local telekinesisTool = createTool("Telekinesis Tool")

-- Create a selection box (for highlighting the selected object)
local selectionBox = Instance.new("SelectionBox")
selectionBox.Color3 = Color3.new(1, 0, 0)
selectionBox.LineThickness = 0.05
selectionBox.Parent = game.Workspace

-- Mobile UI Buttons
local screenGui, buttonQ, buttonE, buttonR, buttonT, buttonY

if isMobile then
    screenGui = Instance.new("ScreenGui", player.PlayerGui)
    screenGui.Name = "TelekinesisUI"

    buttonQ = Instance.new("TextButton", screenGui)
    buttonQ.Size = UDim2.new(0.15, 0, 0.08, 0)
    buttonQ.Position = UDim2.new(0.05, 0, 0.7, 0)
    buttonQ.Text = "⬅️ Distance"
    buttonQ.TextScaled = true

    buttonE = Instance.new("TextButton", screenGui)
    buttonE.Size = UDim2.new(0.15, 0, 0.08, 0)
    buttonE.Position = UDim2.new(0.8, 0, 0.7, 0)
    buttonE.Text = "➡️ Closer"
    buttonE.TextScaled = true

    buttonR = Instance.new("TextButton", screenGui)
    buttonR.Size = UDim2.new(0.2, 0, 0.08, 0)
    buttonR.Position = UDim2.new(0.3, 0, 0.7, 0)
    buttonR.Text = "🔄 Rotate"
    buttonR.TextScaled = true

    buttonT = Instance.new("TextButton", screenGui)
    buttonT.Size = UDim2.new(0.2, 0, 0.08, 0)
    buttonT.Position = UDim2.new(0.3, 0, 0.8, 0)
    buttonT.Text = "↕️ Tilt"
    buttonT.TextScaled = true

    buttonY = Instance.new("TextButton", screenGui)
    buttonY.Size = UDim2.new(0.2, 0, 0.08, 0)
    buttonY.Position = UDim2.new(0.55, 0, 0.8, 0)
    buttonY.Text = "🚀 Throw"
    buttonY.TextScaled = true

    -- Mobile Button Actions
    buttonQ.MouseButton1Click:Connect(function()
        grabDistance = grabDistance + 10
    end)

    buttonE.MouseButton1Click:Connect(function()
        grabDistance = math.max(grabDistance - 10, 5)
    end)

    buttonR.MouseButton1Click:Connect(function()
        if grabbedObject then grabbedObject.CFrame = grabbedObject.CFrame * CFrame.Angles(0, math.rad(rotationSpeed), 0) end
    end)

    buttonT.MouseButton1Click:Connect(function()
        if grabbedObject then grabbedObject.CFrame = grabbedObject.CFrame * CFrame.Angles(math.rad(tiltSpeed), 0, 0) end
    end)

    buttonY.MouseButton1Click:Connect(function()
        if grabbedObject then
            grabbedObject.Velocity = mouse.UnitRay.Direction * throwStrength
            for _, obj in ipairs(grabbedObject:GetChildren()) do
                if obj:IsA("BodyPosition") or obj:IsA("BodyGyro") then obj:Destroy() end
            end
            grabbedObject = nil
            holding = false
        end
    end)
end

-- Function to grab an object (Fixes Long-Range Issue)
local function grabObject()
    if selectedPart and not holding then
        grabbedObject = selectedPart
        holding = true

        -- Create movement constraints
        local bodyPosition = Instance.new("BodyPosition", grabbedObject)
        bodyPosition.MaxForce = heavyStrength
        bodyPosition.D = 10
        bodyPosition.P = 5000

        local bodyGyro = Instance.new("BodyGyro", grabbedObject)
        bodyGyro.MaxTorque = heavyStrength

        -- Track movement
        local moveConnection
        moveConnection = RunService.RenderStepped:Connect(function()
            if holding and grabbedObject then
                local targetPosition = mouse.Hit.Position + Vector3.new(0, 3, 0)

                -- Fix for objects stopping at long range
                if (player.Character.HumanoidRootPart.Position - grabbedObject.Position).Magnitude > maxGrabDistance then
                    grabbedObject.Position = player.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0)
                else
                    bodyPosition.Position = grabbedObject.Position:Lerp(targetPosition, 0.2)
                end
            else
                moveConnection:Disconnect()
            end
        end)
    end
end

-- Controls for PC
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then grabDistance = grabDistance + 10 end
    if input.KeyCode == Enum.KeyCode.E then grabDistance = math.max(grabDistance - 10, 5) end
    if input.KeyCode == Enum.KeyCode.R then if grabbedObject then grabbedObject.CFrame = grabbedObject.CFrame * CFrame.Angles(0, math.rad(rotationSpeed), 0) end end
    if input.KeyCode == Enum.KeyCode.T then if grabbedObject then grabbedObject.CFrame = grabbedObject.CFrame * CFrame.Angles(math.rad(tiltSpeed), 0, 0) end end
    if input.KeyCode == Enum.KeyCode.Y then grabObject() end
end)

-- Detect tool activation
selectionTool.Activated:Connect(toggleSelection)
telekinesisTool.Activated:Connect(function() if selectedPart then if not holding then grabObject() else releaseObject() end end end)
telekinesisTool.Unequipped:Connect(releaseObject)
