-- Define Services and Player
local player = game:GetService("Players").LocalPlayer
local backpack = player:FindFirstChild("Backpack")
local starterGear = player:FindFirstChild("StarterGear")
local replicatedStorage = game:GetService("ReplicatedStorage")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")

local isPlaying = false
local noclipEnabled = false
local executedPlayers = {} -- Stores players who executed the script

-- Debugging function (prints to console)
local function debugMessage(msg)
    print("[Flexworks Debug]: " .. msg)
end

debugMessage("Script Started")

-- Create a BindableEvent for Flexworks users only
local flexworksEvent = replicatedStorage:FindFirstChild("FlexworksExclusive") or Instance.new("BindableEvent", replicatedStorage)
flexworksEvent.Name = "FlexworksExclusive"

-- Function to Enable Noclip
local function enableNoclip()
    noclipEnabled = true
    runService.Stepped:Connect(function()
        if noclipEnabled and player.Character then
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end
    end)
end

-- Function to Disable Noclip
local function disableNoclip()
    noclipEnabled = false
    if player.Character then
        for _, part in pairs(player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

-- Function to Create and Store the Tool Persistently
local function createTool()
    local tool = Instance.new("Tool")
    tool.Name = "Unlimited Flexworks"
    tool.RequiresHandle = false
    tool.Parent = backpack

    -- Ensure the tool is stored in StarterGear (persists after resets)
    if starterGear then
        local clonedTool = tool:Clone()
        clonedTool.Parent = starterGear
    end

    return tool
end

-- Ensure the tool exists
local tool = backpack:FindFirstChild("Unlimited Flexworks") or createTool()

-- Function to Play Animation with Noclip
local function playAnimation()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
        animator.Parent = humanoid

        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://77727115892579"
        local track = animator:LoadAnimation(animation)

        enableNoclip() -- Enable noclip before playing the animation
        track:Play()
        debugMessage("Animation Played with Noclip")

        task.spawn(function()
            wait(track.Length) -- Wait until animation ends
            disableNoclip() -- Disable noclip after animation finishes
            debugMessage("Noclip Disabled")
        end)

        return track.Length -- Returns animation duration
    end

    debugMessage("Animation Failed to Play")
    return 3 -- Default to 3 seconds if animation fails
end

-- Function to Play Audio and Make It Follow the Player
local function playAudio()
    local character = player.Character
    if not character then return end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    debugMessage("Playing Audio")

    -- Remove old sounds if they exist
    if humanoidRootPart:FindFirstChild("FlexworksSound") then
        humanoidRootPart:FindFirstChild("FlexworksSound"):Destroy()
    end

    -- Attach a new sound object to the HumanoidRootPart
    local soundFolder = humanoidRootPart:FindFirstChild("SoundFolder") or Instance.new("Folder", humanoidRootPart)
    soundFolder.Name = "SoundFolder"
    soundFolder.Parent = humanoidRootPart

    local audioIDs = {"99126314241685", "95410275491981", "128136381213631"}

    for _, id in pairs(audioIDs) do
        local sound = Instance.new("Sound")
        sound.Name = "FlexworksSound"
        sound.SoundId = "rbxassetid://" .. id
        sound.Volume = 2
        sound.Looped = false
        sound.RollOffMode = Enum.RollOffMode.Linear -- Ensures sound moves with player
        sound.MaxDistance = 100 -- Adjust as needed
        sound.Parent = soundFolder
        sound:Play()

        debugMessage("Playing sound: " .. id)
    end
end

-- Sync Sound Across Script Users
flexworksEvent.Event:Connect(function()
    playAudio()
end)

-- Tool Equipped Function (Prevents Spam)
tool.Equipped:Connect(function()
    if isPlaying then return end

    isPlaying = true
    tool.Parent = backpack

    local duration = playAnimation()
    flexworksEvent:Fire() -- Trigger sound for all script users

    task.spawn(function()
        wait(duration)
        isPlaying = false
    end)
end)

-- Function to Refresh Players Automatically Without Lagging
local function refreshExecutors()
    executedPlayers = {} -- Clear existing players
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v:FindFirstChild("Backpack") and v.Backpack:FindFirstChild("Unlimited Flexworks") then
            table.insert(executedPlayers, v)
        end
    end
end

-- Ensure Tool Persists After Reset
player.CharacterAdded:Connect(function()
    wait(1)
    backpack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack")
    starterGear = player:FindFirstChild("StarterGear")

    if not backpack:FindFirstChild("Unlimited Flexworks") then
        createTool().Parent = backpack
    end

    refreshExecutors() -- Automatically refresh executor list after reset
end)

-- Function to Force Reset the Player
local function forceReset()
    player.Character:BreakJoints() -- Forces reset
end

-- Function to Count Players with Script
local function countExecutors()
    refreshExecutors() -- Ensures updated list before counting
    return #executedPlayers
end -- **Fixed the misplaced `)` here**

-- Create the UI Button
local function createUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = game.CoreGui

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 50, 0, 50)
    button.Position = UDim2.new(0.85, 0, 0.1, 0)
    button.BackgroundTransparency = 0.5
    button.BackgroundColor3 = Color3.new(0, 0, 0)
    button.Text = ""
    button.Parent = screenGui

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(1, 0)
    uiCorner.Parent = button

    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.new(1, 1, 1)
    uiStroke.Parent = button

    local function refreshCount()
        game.StarterGui:SetCore("SendNotification", {
            Title = "Flexworks Users",
            Text = "Users with script: " .. countExecutors(),
            Duration = 3
        })
    end

    button.MouseButton1Click:Connect(refreshCount)

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.End and not gameProcessed then
            refreshCount()
        elseif input.KeyCode == Enum.KeyCode.F5 and not gameProcessed then
            forceReset()
        end
    end)
end

createUI()
-- Final update (maybe?) 
