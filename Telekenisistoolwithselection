local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local backpack = player:FindFirstChildOfClass("Backpack") or player:WaitForChild("Backpack")

-- Variables
local selectedPart = nil
local holding = false
local grabbedObject = nil
local grabDistance = 50 -- Default grab range
local throwStrength = 200 -- Powerful throw
local rotationSpeed = 5 -- Rotation adjustment
local tiltSpeed = 5 -- Tilting adjustment
local heavyStrength = Vector3.new(100000, 100000, 100000) -- Higher lifting power
local isLocked = false -- Lock mode status
local maxGrabDistance = math.huge -- Infinite range ðŸš€

-- Function to detect if the player is on mobile
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Function to create a tool and re-add it to the player's backpack
local function createTool(name)
    local tool = Instance.new("Tool")
    tool.Name = name
    tool.RequiresHandle = false
    tool.Parent = backpack
    return tool
end

-- Function to re-add tools correctly after death
local function ensureToolsExist()
    backpack = player:FindFirstChildOfClass("Backpack") or player:WaitForChild("Backpack")

    -- Remove old instances to prevent duplicates
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.Name == "Selection Tool" or tool.Name == "Telekinesis Tool") then
            tool:Destroy()
        end
    end

    -- Recreate the tools
    createTool("Selection Tool")
    createTool("Telekinesis Tool")
end

-- Detect player respawning and fix tools
player.CharacterAdded:Connect(function()
    task.wait(2) -- Small delay to ensure character is fully loaded
    ensureToolsExist()
end)

-- Create Tools (Initial Execution)
ensureToolsExist()

-- Create a selection box (for highlighting the selected object)
local selectionBox = Instance.new("SelectionBox")
selectionBox.Color3 = Color3.new(1, 0, 0)
selectionBox.LineThickness = 0.05
selectionBox.Parent = game.Workspace

-- Function to change cursor to dragging hand when holding
local function updateCursor(state)
    if not isMobile then
        if state then
            mouse.Icon = "rbxasset://textures/DragCursor.png" -- Dragging cursor
        else
            mouse.Icon = "rbxasset://textures/ArrowCursor.png" -- Default cursor
        end
    end
end

-- Function to grab an object (Fixes Long-Range Issue)
local function grabObject()
    if selectedPart and not holding then
        grabbedObject = selectedPart
        holding = true
        updateCursor(true) -- Change cursor when grabbing

        -- Create movement constraints
        local bodyPosition = Instance.new("BodyPosition", grabbedObject)
        bodyPosition.MaxForce = heavyStrength
        bodyPosition.D = 10
        bodyPosition.P = 5000

        local bodyGyro = Instance.new("BodyGyro", grabbedObject)
        bodyGyro.MaxTorque = heavyStrength

        -- Track movement
        local moveConnection
        moveConnection = RunService.RenderStepped:Connect(function()
            if holding and grabbedObject then
                local targetPosition = isLocked
                    and (grabbedObject.Position + (mouse.UnitRay.Direction * grabDistance))
                    or (mouse.Hit.Position + Vector3.new(0, 3, 0))

                if (player.Character.HumanoidRootPart.Position - grabbedObject.Position).Magnitude > maxGrabDistance then
                    grabbedObject.Position = player.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0)
                else
                    bodyPosition.Position = grabbedObject.Position:Lerp(targetPosition, 0.2)
                end
            else
                moveConnection:Disconnect()
            end
        end)
    end
end

-- Function to release the object
local function releaseObject()
    if grabbedObject then
        grabbedObject.Velocity = mouse.UnitRay.Direction * throwStrength
        updateCursor(false) -- Reset cursor

        for _, obj in ipairs(grabbedObject:GetChildren()) do
            if obj:IsA("BodyPosition") or obj:IsA("BodyGyro") then obj:Destroy() end
        end
        grabbedObject = nil
        holding = false
    end
end

-- Controls for PC
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.R then isLocked = not isLocked end
end)

-- Detect tool activation
local function toggleSelection()
    local target = mouse.Target
    if target and target:IsA("BasePart") and not target.Anchored and not target.Parent:FindFirstChildOfClass("Humanoid") then
        if selectedPart == target then
            selectedPart = nil
            selectionBox.Adornee = nil
        else
            selectedPart = target
            selectionBox.Adornee = target
        end
    end
end

-- Activate tools
local selectionTool = backpack:FindFirstChild("Selection Tool")
local telekinesisTool = backpack:FindFirstChild("Telekinesis Tool")

if selectionTool then
    selectionTool.Activated:Connect(toggleSelection)
end

if telekinesisTool then
    telekinesisTool.Activated:Connect(function()
        if selectedPart then
            if not holding then
                grabObject()
            else
                releaseObject()
            end
        end
    end)
    telekinesisTool.Unequipped:Connect(releaseObject)
end
