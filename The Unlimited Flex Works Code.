-- Define Services
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local player = players.LocalPlayer
local isPlaying = false
local tool = nil -- Ensure tool is globally referenced

print("[DEBUG] Script Loaded")

-- Tool Name & Version System
local TOOL_NAME = "Unlimited Flexworks"
local TOOL_VERSION = "1.6" -- Change this when updating

-- **Function to Remove Outdated Tools & Keep Latest Version**
local function removeOutdatedTools()
    print("[DEBUG] Removing outdated tools")
    local backpack = player:FindFirstChild("Backpack")
    local starterGear = player:FindFirstChild("StarterGear")
    
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and item.Name == TOOL_NAME then
                item:Destroy()
            end
        end
    end
    
    if starterGear then
        for _, item in pairs(starterGear:GetChildren()) do
            if item:IsA("Tool") and item.Name == TOOL_NAME then
                item:Destroy()
            end
        end
    end
end

-- **Function to Create and Store the Tool Persistently**
local function createTool()
    print("[DEBUG] Creating tool")
    local backpack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack")
    local starterGear = player:FindFirstChild("StarterGear") or player:WaitForChild("StarterGear")
    
    if not backpack then 
        print("[ERROR] Backpack not found")
        return 
    end
    
    removeOutdatedTools()
    
    tool = Instance.new("Tool")
    tool.Name = TOOL_NAME
    tool.RequiresHandle = false
    tool.Parent = backpack
    
    if starterGear then
        local clonedTool = tool:Clone()
        clonedTool.Parent = starterGear
    end
    
    return tool
end

-- **Ensure Tool Persists After Respawn**
local function ensureToolPersistence()
    player.CharacterAdded:Connect(function()
        print("[DEBUG] Character respawned, ensuring tool persistence")
        wait(1)
        tool = createTool()
        setupTool()
    end)
end

-- **Function to Play Typewriter Effect for Captions**
local function playCaptions(textSequence, delays, speed)
    print("[DEBUG] Displaying captions")
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FlexworksCaptionGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player:FindFirstChild("PlayerGui")
    
    local usernameLabel = Instance.new("TextLabel")
    usernameLabel.Size = UDim2.new(0.6, 0, 0.05, 0)
    usernameLabel.Position = UDim2.new(0.2, 0, 0.75, 0)
    usernameLabel.BackgroundTransparency = 1
    usernameLabel.TextColor3 = Color3.fromRGB(255, 50, 50) -- Semi-red color
    usernameLabel.Font = Enum.Font.SourceSansBold
    usernameLabel.TextScaled = true
    usernameLabel.Text = "[" .. player.Name .. "]"
    usernameLabel.Parent = screenGui
    
    local captionLabel = Instance.new("TextLabel")
    captionLabel.Size = UDim2.new(0.6, 0, 0.05, 0)
    captionLabel.Position = UDim2.new(0.2, 0, 0.8, 0)
    captionLabel.BackgroundTransparency = 1
    captionLabel.TextColor3 = Color3.fromRGB(255, 50, 50) -- Semi-red color
    captionLabel.Font = Enum.Font.SourceSansBold
    captionLabel.TextScaled = true
    captionLabel.Text = ""
    captionLabel.Parent = screenGui
    
    for i, text in ipairs(textSequence) do
        local typeSpeed = speed[i] or 0.05
        for j = 1, #text do
            captionLabel.Text = string.sub(text, 1, j)
            wait(typeSpeed)
        end
        wait(delays[i])
    end
    wait(2)
    screenGui:Destroy()
end

-- **Ensure execution audio and captions play at startup**
playCaptions({"I'm done messing around...", "This should end it all."}, {0.5, 0.5}, {0.05, 0.05})

-- **Function to Setup Tool Equipped Behavior**
local function setupTool()
    print("[DEBUG] Setting up tool")
    if tool then
        tool.Equipped:Connect(function()
            if isPlaying then return end
            isPlaying = true
            print("[DEBUG] Tool equipped, playing animation and sound")
            
            -- Play animation and sounds with tool use
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            
            if humanoid then
                local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
                animator.Parent = humanoid
                
                local animation = Instance.new("Animation")
                animation.AnimationId = "rbxassetid://77727115892579"
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                
                -- Play additional sound effects
                local audioIDs = {"99126314241685", "95410275491981", "128136381213631"}
                for _, id in ipairs(audioIDs) do
                    local sound = Instance.new("Sound")
                    sound.SoundId = "rbxassetid://" .. id
                    sound.Volume = 2
                    sound.Looped = false
                    sound.Parent = character
                    sound:Play()
                end
            else
                print("[ERROR] Humanoid not found for animation")
            end
            
            task.wait(2) -- Simulating action
            isPlaying = false
        end)
    else
        print("[ERROR] Tool not found during setup")
    end
end

-- Ensure the tool exists at script execution
print("[DEBUG] Initializing tool")
tool = createTool()
setupTool()
ensureToolPersistence()
print("[DEBUG] Script execution completed")
